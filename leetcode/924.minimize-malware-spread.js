/*
 * @lc app=leetcode id=924 lang=javascript
 *
 * [924] Minimize Malware Spread
 */

// @lc code=start
/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function(graph, initial) {
    let colorIndex = 1;
    const graphWithColor = graph.map((i, index) => { return { index, }});
    const colorCount = {};

    function dfsColor(index, color) {
        for (let i = 0; i < graph.length; i++) {
            if (i !== index && graph[index][i] && !graphWithColor[i].color) {
                setColor(i, color);
                dfsColor(i, color);
            }
        }
    }
    function setColor(index, color) {
        graphWithColor[index].color = color;
        colorCount[color] = colorCount[color] || 0;
        colorCount[color]++;
    }
    
    for (let index of initial) {
        if (!graphWithColor[index].color) {
            setColor(index, colorIndex);
            dfsColor(index, colorIndex++);
        }
    }

    const colorCountOfInitail = {};
    for (let index of initial) {
        let color = graphWithColor[index].color;
        colorCountOfInitail[color] = colorCountOfInitail[color] || 0;
        colorCountOfInitail[color]++;
    }

    let uniqueIndexs = [];
    for (let index of initial) {
        let color = graphWithColor[index].color;
        if (colorCountOfInitail[color] === 1) {
            uniqueIndexs.push(index);
        }
    }
    if (!uniqueIndexs.length) {
        return initial.sort((a, b) => a - b)[0];
    }
    let maxSize = 0;
    for (let index of uniqueIndexs) {
        let color = graphWithColor[index].color;
        if (colorCount[color] >= maxSize) {
            maxSize = colorCount[color];
        }
    }
    let result = Number.MAX_VALUE;
    for (let index of uniqueIndexs) {
        if (colorCount[graphWithColor[index].color] === maxSize) {
            index < result && ( result = index );
        }
    }
    return result;
};

minMalwareSpread([[1,1,0],[1,1,0],[0,0,1]], [0,1]);
// @lc code=end

